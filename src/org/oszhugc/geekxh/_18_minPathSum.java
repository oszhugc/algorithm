package org.oszhugc.geekxh;

/**
 * 给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
 *
 * 输入:
 * [
 *   [1,3,1],
 *   [1,5,1],
 *   [4,2,1]
 * ]
 * 输出: 7
 * 解释: 因为路径 1→3→1→1→1 的总和最小。
 *
 */
public class _18_minPathSum {

    /**
     * 1. 定义数组元素的含义
     *     由于我们的目的时从左上到右下， 最小路径和是多少； 那我们就定义dp[i][j]的含义为： 当机器人从左上角
     *     走到（i,j）这个位置时， 最小的路径和dp[i][j]. 那么dp[m-1][n-1]就是我们要的答案了
     *     注意： 这个网格相当于一个二维数组， 数组是从下标0开始算的， 所以右下角的位置时(m-1, n-1)
     * 2. 找出关系数组元素间的关系式
     *     想象一下， 机器人要怎么样才能到达（i，j）？ 由于机器人可以向下或者向右走， 所以有两种方式到达：
     *     一种是从(i-1, j)这个位置走到
     *     一种是从(i, j-1)这个位置走到
     *     不过这次不是计算所有可能路径， 而是计算哪一个路径和是最小的， 那么我们要从这两种方式中， 选择一种
     *     使得dp[i][j]的值是最小的， 显然有
     *     dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]
     * 3. 找出初始值
     *     显然， 当dp[i][j]中， 如果i或者j有一个为0， 那么还能使用关系式吗？ 答案是不能的， 因为这个时候，
     *     把i-1或者j-1， 就变成负值了， 数组就会出问题， 所以我们的初始值是计算出所有dp[0][0...n-1]和所有的
     *     dp[0...m-1][0]. 这个还是非常容易计算的， 相当于最上面一行和左边一列。 因此初始值如下：
     *     dp[0][j] = arr[0][j] + dp[0][j-1]
     *     dp[i][0] = arr[i][0] + dp[i][0]
     *
     * @param grid
     * @return
     */
    public static int minPathSum(int[][] grid){
        int m = grid.length;
        int n = grid[0].length;
        //值表示路径和
        int dp[][] = new int[m][n];
        dp[0][0] = grid[0][0];
        for (int i = 1; i < m; i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for (int i = 1; i < n; i++){
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }
        for (int i = 1; i < m; i++){
            for (int j = 1; j < n; j++){
                dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
}
